{% extends 'base.html.twig' %}

{% block title %}Create New Room{% endblock %}

{% block body %}
    <div class="min-h-screen py-20">
        <div class="max-w-4xl mx-auto px-6">
            <section class="relative">

                <div class="relative max-w-7xl mx-auto flex flex-col justify-center py-16">
                    <div class="max-w-3xl h-fit">
                        <h1 class="text-6xl md:text-7xl font-bold text-white leading-tight">Create Room</h1>
                        <p class="mt-8 text-xl text-white/70">Create a new room and play with your friends !</p>

                    </div>
                </div>
            </section>

            <!-- Header -->
            <div class="flex items-center gap-4 mb-8">
                <span class="text-sm font-medium text-white/50 uppercase tracking-wider">New Room</span>
                <div class="h-px flex-1 bg-gradient-to-r from-indigo-500 via-fuchsia-500 to-rose-500"></div>
            </div>

            {{ form_start(form, {'attr': {'class': 'space-y-8'}}) }}
            <!-- Basic Settings -->
            <div class="relative group rounded-2xl overflow-hidden">
                <div class="absolute inset-0 bg-gradient-to-br from-indigo-500/10 to-fuchsia-500/10 backdrop-blur-xl group-hover:from-indigo-500/20 group-hover:to-fuchsia-500/20 transition-all"></div>
                <div class="relative p-8">
                    <h2 class="text-2xl font-semibold text-white mb-8">Room Settings</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <!-- Room Name -->
                        <div>
                            {{ form_label(form.name, 'Room Name', {'label_attr': {'class': 'text-sm font-medium text-white/70 mb-2 block'}}) }}
                            {{ form_widget(form.name, {'attr': {
                                'class': 'w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-white/30 focus:ring-2 focus:ring-fuchsia-500 focus:border-transparent transition-all',
                                'placeholder': 'Enter a creative room name...',
                                'value': (app.user.nickname ~ "'s Room")
                            }}) }}
                            {{ form_errors(form.name) }}
                        </div>

                        <!-- Capacity -->
                        <div>
                            {{ form_label(form.maxCapacity, 'Player Capacity', {'label_attr': {'class': 'text-sm font-medium text-white/70 mb-2 block'}}) }}
                            <div class="relative">
                                {{ form_widget(form.maxCapacity, {'attr': {
                                    'class': 'w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white focus:ring-2 focus:ring-fuchsia-500 focus:border-transparent transition-all',
                                    'min': '2',
                                    'max': '10',
                                    'value': '4'
                                }}) }}
                                <span class="absolute right-4 top-1/2 -translate-y-1/2 text-white/50">players</span>
                            </div>
                            <p class="mt-2 text-sm text-white/50">Recommended: 4-8 players</p>
                        </div>
                    </div>

                    <!-- Private Room Toggle -->
                    <div class="mt-8">
                        <label class="relative inline-flex items-center">
                            {{ form_widget(form.isPrivate, {'attr': {
                                'class': 'sr-only peer'
                            }}) }}
                            <div class="w-14 h-7 bg-white/5 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-indigo-500 peer-checked:to-fuchsia-500"></div>
                            <span class="ml-3 text-sm font-medium text-white/70">Private Room</span>
                        </label>
                        <p class="mt-2 text-sm text-white/50">Private rooms require an invitation link to join</p>
                    </div>
                </div>
            </div>

            <div class="p-6 bg-gray-800 rounded-lg mt-6">
                <h2 class="text-xl font-semibold text-purple-400 mb-4">Theme Selection</h2>
                <div class="flex flex-col space-y-4">
                    <div class="flex space-x-4">
                        <button id="btnRandomTheme" type="button" class="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white">
                            Random Theme
                        </button>
                        <button id="btnCustomTheme" type="button" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-white">
                            Generate Theme
                        </button>
                    </div>
                    <div id="customThemeContainer" class="mt-4 hidden">
                        <label for="themePrompt" class="block text-sm font-medium text-gray-300 mb-1">
                            Enter keywords for theme generation:
                        </label>
                        <input type="text" id="themePrompt" name="themePrompt" placeholder="please only use keywords" class="mt-1 block w-full rounded-lg bg-gray-700 border-gray-600 text-white p-3">
                        <button id="btnGenerateTheme" type="button" class="mt-4 px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white">
                            Generate
                        </button>
                    </div>
                </div>
            </div>

            <label for="customTheme" class="block text-sm font-medium text-gray-300 mb-1"></label>
            <input type="text" class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-white/30 focus:ring-2 focus:ring-fuchsia-500 focus:border-transparent transition-all" name="customTheme" id="customTheme" value="" placeholder="Here is your theme">

            <!-- Coming Soon Features -->
            <div class="relative rounded-2xl overflow-hidden border border-dashed border-white/10">
                <div class="absolute inset-0 bg-white/5 backdrop-blur-sm"></div>
                <div class="relative p-8">
                    <div class="flex items-center gap-2 mb-8">
                        <span class="px-3 py-1 rounded-full bg-fuchsia-500/20 text-fuchsia-400 text-sm font-medium">Coming Soon</span>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 opacity-50">
                        <!-- Time Settings -->
                        <div>
                            <h3 class="text-sm font-medium text-white/70 mb-2">Time Settings</h3>
                            <select class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white" disabled>
                                <option>Standard (30s)</option>
                                <option>Extended (45s)</option>
                                <option>Quick (20s)</option>
                            </select>
                        </div>

                        <!-- Theme -->
                        <div>
                            <h3 class="text-sm font-medium text-white/70 mb-2">Theme Category</h3>
                            <select class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white" disabled>
                                <option>Random</option>
                                <option>Funny Moments</option>
                                <option>Travel Stories</option>
                            </select>
                        </div>

                        <!-- Game Mode -->
                        <div>
                            <h3 class="text-sm font-medium text-white/70 mb-2">Game Mode</h3>
                            <select class="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white" disabled>
                                <option>Classic</option>
                                <option>Teams</option>
                                <option>Tournament</option>
                            </select>
                        </div>

                        <!-- Rules -->
                        <div>
                            <h3 class="text-sm font-medium text-white/70 mb-2">Special Rules</h3>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" disabled class="rounded bg-white/5 border-white/10 text-fuchsia-500">
                                    <span class="ml-3 text-white/70">Allow Spectators</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" disabled class="rounded bg-white/5 border-white/10 text-fuchsia-500">
                                    <span class="ml-3 text-white/70">Multiple Rounds</span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="flex items-center justify-between pt-4">
                <a href="{{ path('app_room_index') }}" class="flex items-center gap-2 text-white/70 hover:text-white transition-colors group">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:-translate-x-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 12H5M12 19l-7-7 7-7"/>
                    </svg>
                    Back to Rooms
                </a>

                <button type="submit" class="flex items-center gap-2 px-6 py-3 rounded-xl bg-gradient-to-r from-indigo-500 via-fuchsia-500 to-rose-500 text-white font-medium hover:shadow-lg hover:shadow-white/10 transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                    Create Room
                </button>
            </div>
            {{ form_end(form) }}
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const btnRandomTheme = document.getElementById('btnRandomTheme');
            const btnCustomTheme = document.getElementById('btnCustomTheme');
            const customThemeContainer = document.getElementById('customThemeContainer');
            const btnGenerateTheme = document.getElementById('btnGenerateTheme');
            const themePrompt = document.getElementById('themePrompt');
            const customThemeInput = document.getElementById('customTheme');

            customThemeInput.value = '';

            btnRandomTheme.addEventListener('click', function() {
                fetch("{{ path('theme_random') }}", {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                        } else {
                            customThemeInput.value = '';
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("An error occurred while selecting a random theme.");
                    });
            });

             btnCustomTheme.addEventListener('click', function() {
                customThemeContainer.classList.toggle('hidden');
            });

            btnGenerateTheme.addEventListener('click', function() {
                const prompt = themePrompt.value.trim();
                if (!prompt) {
                    alert("please only use keywords");
                    return;
                }
                fetch("{{ path('theme_generator') }}", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt: prompt })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                        } else {
                            customThemeInput.value = data.theme;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("An error occurred while generating the theme.");
                    });
            });
        });
    </script>
{% endblock %}