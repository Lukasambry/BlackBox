{% extends 'base.html.twig' %}

{% block title %}{{ room.name }}{% endblock %}

{% block body %}
    <div class="card p-6">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">{{ room.name }}</h1>
            {% if not room.isStarted %}
                <div class="flex items-center space-x-4">
                    <div class="bg-gray-800 rounded-lg p-4">
                        <p class="text-sm mb-2">Share this link with your friends:</p>
                        <div class="flex items-center space-x-2">
                            <input type="text"
                                   id="inviteLink"
                                   readonly
                                   value="{{ url('app_room_join', {'inviteCode': room.inviteCode}) }}"
                                   class="bg-gray-700 text-white px-4 py-2 rounded-l-lg w-96 focus:outline-none"
                            />
                            <button onclick="copyInviteLink()"
                                    class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-r-lg flex items-center"
                                    id="copyButton">
                                <span class="mr-2">Copy</span>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"/>
                                    <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2H6zm0-2h8a4 4 0 014 4v11a4 4 0 01-4 4H6a4 4 0 01-4-4V5a4 4 0 014-4z"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                    {% if room.isOwner(app.user) %}
                        <button id="startGameBtn"
                                class="btn-primary px-4 py-2 rounded-lg {% if room.players|length < 2 %}opacity-50 cursor-not-allowed{% endif %}"
                                {% if room.players|length < 2 %}disabled{% endif %}>
                            Start Game
                        </button>
                    {% else %}
                        <div id="waitingForStart" class="text-gray-400">
                            Waiting for the host to start the game...
                            <div class="inline-block animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-purple-500 ml-2"></div>
                        </div>
                    {% endif %}
                </div>
            {% endif %}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card p-4">
                <h2 class="text-xl font-semibold mb-4">Players</h2>
                <div id="playersList" class="space-y-2">
                    {% for player in room.players %}
                        <div class="flex items-center space-x-2 player-item">
                            <span class="w-2 h-2 bg-green-500 rounded-full"></span>
                            <span>{{ player.nickname }}</span>
                        </div>
                    {% endfor %}
                </div>
            </div>

            {% if room.isStarted %}
                <div class="card p-4">
                    <h2 class="text-xl font-semibold mb-4">Current Theme</h2>
                    <p class="text-lg">{{ room.theme ? room.theme.question : 'No theme selected' }}</p>
                </div>
            {% endif %}
        </div>
    </div>

    <script>
        function copyInviteLink() {
            const inviteLink = document.getElementById('inviteLink');
            inviteLink.select();

            navigator.clipboard.writeText(inviteLink.value).then(() => {
                const copyButton = document.getElementById('copyButton');
                const originalContent = copyButton.innerHTML;

                copyButton.innerHTML = `
            <span class="mr-2">Copied!</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
        `;
                copyButton.classList.remove('bg-purple-600', 'hover:bg-purple-700');
                copyButton.classList.add('bg-green-600', 'hover:bg-green-700');

                setTimeout(() => {
                    copyButton.innerHTML = originalContent;
                    copyButton.classList.remove('bg-green-600', 'hover:bg-green-700');
                    copyButton.classList.add('bg-purple-600', 'hover:bg-purple-700');
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy invite link:', err);
                alert('Failed to copy invite link');
            });
        }

        function updatePlayersList() {
            const playersContainer = document.getElementById('playersList');

            fetch(`/room/players/${roomId}`)
                .then(response => response.json())
                .then(players => {
                    playersContainer.innerHTML = players.map(player => `
                <div class="flex items-center space-x-2 player-item">
                    <span class="w-2 h-2 bg-green-500 rounded-full"></span>
                    <span>${player.nickname}</span>
                </div>
            `).join('');
                    const startButton = document.getElementById('startGameBtn');
                    if (startButton) {
                        if (players.length >= 2) {
                            startButton.classList.remove('opacity-50', 'cursor-not-allowed');
                            startButton.disabled = false;
                        } else {
                            startButton.classList.add('opacity-50', 'cursor-not-allowed');
                            startButton.disabled = true;
                        }
                    }
                })
                .catch(error => console.error('Error fetching players:', error));
        }

        function checkGameState() {
            fetch(`/room/game-state/${roomId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.isStarted) {
                        window.location.href = `/room/${roomId}`;
                    }
                })
                .catch(error => {
                    console.error('Error checking game state:', error);
                });
        }

        {% if not room.isOwner(app.user) and not room.isStarted %}
        const checkStateInterval = setInterval(checkGameState, 2000);
        {% endif %}

        document.getElementById('startGameBtn')?.addEventListener('click', function() {
            if (this.disabled) return;

            fetch(`/room/start/${roomId}`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        window.location.href = `/room/${roomId}`;
                    }
                })
                .catch(error => {
                    console.error('Error starting game:', error);
                    alert('Failed to start the game');
                });
        });

        const roomId = {{ room.id }};
        setInterval(updatePlayersList, 3000);
    </script>
{% endblock %}