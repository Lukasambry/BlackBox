{% extends 'base.html.twig' %}

{% block title %}{{ room.name }}{% endblock %}

{% block body %}
    <div class="max-w-6xl mx-auto">
        <div class="relative bg-gradient-to-br from-purple-900 to-gray-900 rounded-2xl p-8 mb-8 shadow-xl">
            <div class="flex flex-col md:flex-row justify-between items-center gap-6">
                <div>
                    <h1 class="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-400">
                        {{ room.name }}
                    </h1>
                    <p class="text-gray-400 mt-2">Game Room #{{ room.id }}</p>
                </div>

                {% if not room.isStarted %}
                    <div class="flex flex-col md:flex-row items-center gap-4">
                        {% if room.isOwner(app.user) %}
                            <button id="startGameBtn"
                                    class="relative inline-flex items-center px-8 py-3 overflow-hidden text-lg font-medium text-white bg-purple-600 rounded-lg group hover:bg-gradient-to-r hover:from-purple-600 hover:to-pink-600 hover:ring-2 hover:ring-offset-2 hover:ring-purple-500 transition-all {% if room.players|length < 2 %}opacity-50 cursor-not-allowed{% endif %}"
                                    {% if room.players|length < 2 %}disabled{% endif %}>
                                <span class="relative">
                                    Start Game
                                    {% if room.players|length < 2 %}
                                        <span class="block text-sm opacity-75">Need at least 2 players</span>
                                    {% endif %}
                                </span>
                            </button>
                        {% else %}
                            <div class="text-lg font-medium text-purple-400 flex items-center gap-3">
                                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-purple-500"></div>
                                Waiting for host...
                            </div>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-gray-700/50">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-purple-400">Players</h2>
                    <span class="px-4 py-1 bg-purple-900/50 rounded-full text-purple-400 text-sm">
                        <span id="currentPlayersCount">{{ room.players|length }}</span> / {{ room.maxCapacity }}
                    </span>
                </div>
                <div id="playersList" class="space-y-3">
                    {% for player in room.players %}
                        <div class="flex items-center gap-3 p-3 bg-gray-800/30 rounded-lg border border-gray-700/30 transition-colors hover:bg-gray-700/30">
                            <div class="flex items-center justify-center w-10 h-10 rounded-full bg-purple-900/50">
                                <span class="text-lg font-medium text-purple-400">
                                    {{ player.nickname|first|upper }}
                                </span>
                            </div>
                            <span class="font-medium">{{ player.nickname }}</span>
                            {% if room.isOwner(player) %}
                                <span class="ml-auto px-2 py-1 text-xs bg-purple-900/50 text-purple-400 rounded-full">Host</span>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-gray-700/50 h-fit">
                {% if not room.isStarted %}
                    <div class="flex flex-col h-full">
                        <h2 class="text-2xl font-bold text-purple-400 mb-6">Invite Players</h2>
                        <div class="flex-grow flex flex-col">
                            <div class="space-y-4">
                                <label class="block text-sm font-medium text-gray-400">Share this link</label>
                                <div class="flex">
                                    <input type="text"
                                           id="inviteLink"
                                           readonly
                                           value="{{ url('app_room_join', {'inviteCode': room.inviteCode}) }}"
                                           class="flex-grow px-4 py-3 bg-gray-900/50 border border-gray-700 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-300"
                                    />
                                    <button onclick="copyInviteLink()"
                                            class="px-6 py-3 bg-purple-600 hover:bg-purple-700 rounded-r-lg transition-colors flex items-center gap-2 group"
                                            id="copyButton">
                                        <span>Copy</span>
                                        <svg class="w-5 h-5 transition-transform group-hover:scale-110" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M6 11C6 8.17157 6 6.75736 6.87868 5.87868C7.75736 5 9.17157 5 12 5H15C17.8284 5 19.2426 5 20.1213 5.87868C21 6.75736 21 8.17157 21 11V16C21 18.8284 21 20.2426 20.1213 21.1213C19.2426 22 17.8284 22 15 22H12C9.17157 22 7.75736 22 6.87868 21.1213C6 20.2426 6 18.8284 6 16V11Z" stroke="currentColor" stroke-width="1.5"/>
                                            <path d="M6 19C4.34315 19 3 17.6569 3 16V10C3 6.22876 3 4.34315 4.17157 3.17157C5.34315 2 7.22876 2 11 2H15C16.6569 2 18 3.34315 18 5" stroke="currentColor" stroke-width="1.5"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                {% else %}
                    <div class="h-full flex flex-col">
                        <h2 class="text-2xl font-bold text-purple-400 mb-6">Current Theme</h2>
                        <div class="flex-grow flex items-center justify-center">
                            <p class="text-xl text-center px-6 py-8 bg-gray-900/50 rounded-lg border border-purple-500/20">
                                {{ room.theme ? room.theme.question : 'No theme selected' }}
                            </p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>

    <script>
        function copyInviteLink() {
            const inviteLink = document.getElementById('inviteLink');
            inviteLink.select();

            navigator.clipboard.writeText(inviteLink.value).then(() => {
                const copyButton = document.getElementById('copyButton');
                const originalContent = copyButton.innerHTML;

                copyButton.innerHTML = `
                    <span class="mr-2">Copied!</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                    </svg>
                `;
                copyButton.classList.remove('bg-purple-600', 'hover:bg-purple-700');
                copyButton.classList.add('bg-green-600', 'hover:bg-green-700');

                setTimeout(() => {
                    copyButton.innerHTML = originalContent;
                    copyButton.classList.remove('bg-green-600', 'hover:bg-green-700');
                    copyButton.classList.add('bg-purple-600', 'hover:bg-purple-700');
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy invite link:', err);
                alert('Failed to copy invite link');
            });
        }

        function updatePlayersList() {
            const playersContainer = document.getElementById('playersList');

            fetch(`/room/players/${roomId}`)
                .then(response => response.json())
                .then(players => {
                    playersContainer.innerHTML = players.map(player => `
                    <div class="flex items-center gap-3 p-3 bg-gray-800/30 rounded-lg border border-gray-700/30 transition-colors hover:bg-gray-700/30">
                        <div class="flex items-center justify-center w-10 h-10 rounded-full bg-purple-900/50">
                            <span class="text-lg font-medium text-purple-400">
                                ${player.nickname.charAt(0).toUpperCase()}
                            </span>
                        </div>
                        <span class="font-medium">${player.nickname}</span>
                    </div>`).join('');

                    document.getElementById('currentPlayersCount').textContent = players.length;

                    const startButton = document.getElementById('startGameBtn');
                    if (startButton) {
                        if (players.length >= 2) {
                            startButton.classList.remove('opacity-50', 'cursor-not-allowed');
                            startButton.disabled = false;
                        } else {
                            startButton.classList.add('opacity-50', 'cursor-not-allowed');
                            startButton.disabled = true;
                        }
                    }
                })
                .catch(error => console.error('Error fetching players:', error));
        }

        function checkGameState() {
            fetch(`/room/game-state/${roomId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.isStarted) {
                        window.location.href = `/room/${roomId}`;
                    }
                })
                .catch(error => {
                    console.error('Error checking game state:', error);
                });
        }

        {% if not room.isOwner(app.user) and not room.isStarted %}
        const checkStateInterval = setInterval(checkGameState, 2000);
        {% endif %}

        document.getElementById('startGameBtn')?.addEventListener('click', function() {
            if (this.disabled) return;

            fetch(`/room/start/${roomId}`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        window.location.href = `/room/${roomId}`;
                    }
                })
                .catch(error => {
                    console.error('Error starting game:', error);
                    alert('Failed to start the game');
                });
        });

        const roomId = {{ room.id }};
        setInterval(updatePlayersList, 3000);
    </script>
{% endblock %}